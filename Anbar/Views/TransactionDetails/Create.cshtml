@model Anbar.Models.TransactionDetail

@{
    ViewBag.Title = "Create";
}

<h2>ایجاد</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>TransactionDetail</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.TransactionID, "شماره برگه تراکنش", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TransactionID",null, htmlAttributes: new { @class = "form-control" })             
                @Html.ValidationMessageFor(model => model.TransactionID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("جستجوی محصول", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("SearchTextBox", null, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.ProductID, "نام محصول", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProductID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InventoryID, "انبار", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("InventoryID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.InventoryID, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>


        @*EditFor ==> CheckBoxFor*@
       
        @if (ViewBag.ChkDisabled)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.PlusMinusSign, htmlAttributes: new { @class = "control-label col-md-2", @hidden="True" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.CheckBoxFor(model => model.PlusMinusSign, htmlAttributes: new { @value = ViewBag.PlusMinusSign.ToString(), @hidden = "True" })
                        @Html.ValidationMessageFor(model => model.PlusMinusSign, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.PlusMinusSign, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.CheckBoxFor(model => model.PlusMinusSign)
                        @*, htmlAttributes: new { @value = ViewBag.PlusMinusSign.ToString() })*@

                              @Html.ValidationMessageFor(model => model.PlusMinusSign, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        }



                        @*, htmlAttributes: new{ value = "PlusMinusSign"})*@


                        @*,htmlAttributes: new { @value = "PlusMinusSign" }
                        *@




               

                        @*<div class="form-group">
                                @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.TotalPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.TotalPrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TotalPrice, "", new { @class = "text-danger" })
                                </div>
                            </div>*@

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="ایجاد" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                    }

                    <div>
                        @Html.ActionLink("برگشت به لیست", "Index")
                    </div>

                    @section Scripts {
                        @Scripts.Render("~/bundles/jqueryval")
                        @Scripts.Render("~bundles/jquery")}

                   
                    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
                    <script type="text/javascript">

                        $(document).ready(function () {

                            var $txt = $('input[id$=SearchTextBox]');

                            var $ddl = $('select[id$=ProductID]');

                            var $items = $('select[id$=ProductID] option');



                            $txt.keyup(function () {

                                searchDdl($txt.val());

                            });



                            function searchDdl(item) {

                                $ddl.empty();

                                var exp = new RegExp(item, "i");

                                var arr = $.grep($items,

                                    function (n) {

                                        return exp.test($(n).text());

                                    });



                                if (arr.length > 0) {

                                    countItemsFound(arr.length);

                                    $.each(arr, function () {

                                        $ddl.append(this);

                                        $ddl.get(0).selectedIndex = 0;

                                    }

                                    );

                                }

                                else {

                                    countItemsFound(arr.length);

                                    $ddl.append("<option>No Items Found</option>");

                                }

                            }



                            function countItemsFound(num) {

                                $("#para").empty();

                                if ($txt.val().length) {

                                    $("#para").html(num + " items found");

                                }



                            }

                        });

                    </script>
